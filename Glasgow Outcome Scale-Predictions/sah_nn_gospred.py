# -*- coding: utf-8 -*-
"""SAH-NN-GOSPred.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EPns5yMVa_V6MhhtqlX-fLE1myChSy5h
"""

import pandas as pd
from keras.models import Sequential
from keras.layers import Dense
from keras.wrappers.scikit_learn import KerasClassifier
from keras.utils import np_utils
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import KFold
from sklearn.preprocessing import LabelEncoder
from sklearn.pipeline import Pipeline

df = pd.read_csv('manipal_sah_tr.csv')
df_test = pd.read_csv('manipal_sah_test.csv')
df.drop(['Radiological Vasospas1', 'Clinical ischemic de0icits', 'Outcome at Discharge'], inplace = True,  axis = 1) 
df_test.drop(['Radiological Vasospas1', 'Clinical ischemic de0icits', 'Outcome at Discharge'], inplace = True,  axis = 1) 

print(df.head())

X = df.loc[:, 'Age':'WFNS grade']
Y = df.loc[:,'Outcome at 3 months']
Y_GOS = Y-1
X.info()

# # encode class values as integers
# encoder = LabelEncoder()
# encoder.fit(Y)
# encoded_Y = encoder.transform(Y)
# # convert integers to dummy variables (i.e. one hot encoded)
# dummy_y = np_utils.to_categorical(encoded_Y)

# print(dummy_y)

# def baseline_model():
# 	# create model
# 	model = Sequential()
# 	model.add(Dense(8, input_dim=5, activation='relu'))
# 	model.add(Dense(5, activation='softmax'))
# 	# Compile model
# 	model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
#   #model.summary()
# 	return model
 
# estimator = KerasClassifier(build_fn=baseline_model, epochs=10, batch_size=5, verbose=0)
# kfold = KFold(n_splits=10, shuffle=True)
# results = cross_val_score(estimator, X, Y, cv=kfold)
# print("Baseline: %.2f%% (%.2f%%)" % (results.mean()*100, results.std()*100))

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,Y_GOS,test_size=0.2, random_state=42, stratify=Y)

num_classes=5
model = Sequential()
model.add(Dense(128, activation='relu', input_dim = 5))
model.add(Dense(128, activation='relu'))
model.add(Dense(num_classes, activation='softmax'))

model.summary()

model.compile(loss='sparse_categorical_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])
class_weight = {0: 6.,
                1: 6.,
                2: 3.,
                3: 3.,
                4: 1.}

batch_size = 32
num_classes = 5
epochs = 100
history = model.fit(X_train, y_train,
                    batch_size=batch_size,
                    epochs=epochs,
                    verbose=2,
                    validation_data=(X_test, y_test),class_weight=class_weight)

import numpy as np

a=np.argmax(model.predict_proba(df_test),axis = 1)

import csv
csvfile = open('KKS-NN-GOS.csv', 'w', newline='')
obj = csv.writer(csvfile)
for i in a:
  obj.writerow(str(i))
csvfile.close()

